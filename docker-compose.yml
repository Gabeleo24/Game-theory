# Docker Compose Configuration for ADS599 Capstone Soccer Intelligence System
# Orchestrates data collection, analysis, and optional database services

version: '3.8'

services:
  # ============================================================================
  # Main Application Container - Production (Performance Optimized)
  # ============================================================================
  soccer-intelligence:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: soccer-intelligence-app
    restart: unless-stopped
    # Performance optimized resource limits
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    environment:
      - PYTHONPATH=/app/src
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - API_FOOTBALL_KEY=${API_FOOTBALL_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TWITTER_BEARER_TOKEN=${TWITTER_BEARER_TOKEN}
      - SPORTMONKS_API_KEY=${SPORTMONKS_API_KEY}
      # Performance optimization environment variables
      - PYTHONOPTIMIZE=2
      - PYTHONHASHSEED=random
      - PYTHONIOENCODING=utf-8
      - PYTHONGC=1
      - PANDAS_COMPUTE_BACKEND=numba
      - OMP_NUM_THREADS=4
      - NUMEXPR_MAX_THREADS=4
      - MKL_NUM_THREADS=4
      - OPENBLAS_NUM_THREADS=4
      # Memory optimization
      - MALLOC_ARENA_MAX=2
      - MALLOC_MMAP_THRESHOLD_=131072
      - MALLOC_TRIM_THRESHOLD_=131072
      - MALLOC_TOP_PAD_=131072
      - MALLOC_MMAP_MAX_=65536
    volumes:
      # Persistent data storage with optimized mount options
      - ./data/focused:/app/data/focused:cached
      - ./data/cache:/app/data/cache:cached
      - ./data/analysis:/app/data/analysis:cached
      - ./data/reports:/app/data/reports:cached
      - ./logs:/app/logs:cached
      # Configuration files
      - ./config/api_keys.yaml:/app/config/api_keys.yaml:ro
      - ./config/team_statistics_collection_config.yaml:/app/config/team_statistics_collection_config.yaml:ro
      - ./config/player_statistics_collection_config.yaml:/app/config/player_statistics_collection_config.yaml:ro
      - ./config/performance_config.yaml:/app/config/performance_config.yaml:ro
    networks:
      - soccer-intelligence-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.path.append('src'); from soccer_intelligence.utils.config import Config; Config()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Optimize container startup
    init: true
    shm_size: 2g

  # ============================================================================
  # Development Container with Additional Tools
  # ============================================================================
  soccer-intelligence-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: soccer-intelligence-dev
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app/src
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
      - API_FOOTBALL_KEY=${API_FOOTBALL_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TWITTER_BEARER_TOKEN=${TWITTER_BEARER_TOKEN}
      - SPORTMONKS_API_KEY=${SPORTMONKS_API_KEY}
    volumes:
      # Development volumes with source code mounting
      - .:/app
      - ./data/focused:/app/data/focused
      - ./data/cache:/app/data/cache
      - ./data/analysis:/app/data/analysis
      - ./data/reports:/app/data/reports
      - ./logs:/app/logs
    ports:
      - "8888:8888"  # Jupyter
      - "8501:8501"  # Streamlit
      - "8000:8000"  # FastAPI
    networks:
      - soccer-intelligence-network
    depends_on:
      - postgres
      - redis
    profiles:
      - development

  # ============================================================================
  # PostgreSQL Database for Structured Data Storage (Performance Optimized)
  # ============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: soccer-intelligence-db
    restart: unless-stopped
    # Performance optimized resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-soccer_intelligence}
      - POSTGRES_USER=${POSTGRES_USER:-soccerapp}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-soccerpass123}
      - PGDATA=/var/lib/postgresql/data/pgdata
      # PostgreSQL performance optimization
      - POSTGRES_SHARED_BUFFERS=1GB
      - POSTGRES_EFFECTIVE_CACHE_SIZE=3GB
      - POSTGRES_MAINTENANCE_WORK_MEM=256MB
      - POSTGRES_CHECKPOINT_COMPLETION_TARGET=0.9
      - POSTGRES_WAL_BUFFERS=16MB
      - POSTGRES_DEFAULT_STATISTICS_TARGET=100
      - POSTGRES_RANDOM_PAGE_COST=1.1
      - POSTGRES_EFFECTIVE_IO_CONCURRENCY=200
      - POSTGRES_WORK_MEM=64MB
      - POSTGRES_MIN_WAL_SIZE=1GB
      - POSTGRES_MAX_WAL_SIZE=4GB
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "5432:5432"
    networks:
      - soccer-intelligence-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-soccerapp} -d ${POSTGRES_DB:-soccer_intelligence}"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Optimize container startup
    init: true
    shm_size: 1g
    command: >
      postgres
      -c shared_buffers=1GB
      -c effective_cache_size=3GB
      -c maintenance_work_mem=256MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=64MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_worker_processes=8
      -c max_parallel_workers_per_gather=4
      -c max_parallel_workers=8
      -c max_parallel_maintenance_workers=4

  # ============================================================================
  # Redis for Caching and Session Management (Performance Optimized)
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: soccer-intelligence-cache
    restart: unless-stopped
    # Performance optimized resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD:-redispass123}
      --maxmemory 1536mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-keepalive 300
      --timeout 0
      --tcp-backlog 511
      --databases 16
      --stop-writes-on-bgsave-error no
      --rdbcompression yes
      --rdbchecksum yes
      --dir /data
      --logfile ""
      --syslog-enabled no
      --hash-max-ziplist-entries 512
      --hash-max-ziplist-value 64
      --list-max-ziplist-size -2
      --list-compress-depth 0
      --set-max-intset-entries 512
      --zset-max-ziplist-entries 128
      --zset-max-ziplist-value 64
      --hll-sparse-max-bytes 3000
      --stream-node-max-bytes 4096
      --stream-node-max-entries 100
      --activerehashing yes
      --client-output-buffer-limit normal 0 0 0
      --client-output-buffer-limit replica 256mb 64mb 60
      --client-output-buffer-limit pubsub 32mb 8mb 60
      --hz 10
      --dynamic-hz yes
      --aof-rewrite-incremental-fsync yes
      --rdb-save-incremental-fsync yes
      --lfu-log-factor 10
      --lfu-decay-time 1
    volumes:
      - redis_data:/data:cached
    ports:
      - "6379:6379"
    networks:
      - soccer-intelligence-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    # Optimize container startup
    init: true

  # ============================================================================
  # Jupyter Collaboration Services
  # ============================================================================

  # Jupyter for Analysts - Read-only data access with visualization tools
  jupyter-analyst:
    profiles: ["analyst", "jupyter", "team"]
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: jupyter-analyst
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - JUPYTER_ROLE=analyst
      - JUPYTER_TOKEN=analyst_secure_token_2024
      - JUPYTER_PASSWORD=soccer_intelligence_analyst
    volumes:
      - ./notebooks:/app/notebooks:cached
      - ./data:/app/data:ro  # Read-only data access
      - ./docs:/app/docs:ro  # Read-only documentation
      - ./config:/app/config:ro
      - ./src:/app/src:ro
    ports:
      - "8888:8888"
    networks:
      - soccer-intelligence-network
    command: ["jupyter", "lab", "--config=/app/config/jupyter/jupyter_config_analyst.py"]
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Jupyter for Developers - Full system access
  jupyter-developer:
    profiles: ["developer", "jupyter", "team"]
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: jupyter-developer
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - JUPYTER_ROLE=developer
      - JUPYTER_TOKEN=developer_secure_token_2024
      - JUPYTER_PASSWORD=soccer_intelligence_dev
    volumes:
      - .:/app:cached  # Full project access
      - /var/run/docker.sock:/var/run/docker.sock  # Docker access
    ports:
      - "8889:8889"
    networks:
      - soccer-intelligence-network
    command: ["jupyter", "lab", "--config=/app/config/jupyter/jupyter_config_developer.py"]
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 4G
          cpus: '2.0'

  # Jupyter for Researchers - Academic tools and research environment
  jupyter-researcher:
    profiles: ["researcher", "jupyter", "team"]
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: jupyter-researcher
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgres
      - JUPYTER_ROLE=researcher
      - JUPYTER_TOKEN=researcher_secure_token_2024
      - JUPYTER_PASSWORD=soccer_intelligence_research
    volumes:
      - ./notebooks:/app/notebooks:cached
      - ./data:/app/data:ro  # Read-only data access
      - ./docs:/app/docs:cached  # Documentation access
      - ./config:/app/config:ro
      - ./src:/app/src:ro
    ports:
      - "8890:8890"
    networks:
      - soccer-intelligence-network
    command: ["jupyter", "lab", "--config=/app/config/jupyter/jupyter_config_researcher.py"]
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '3.0'
        reservations:
          memory: 3G
          cpus: '1.5'

  # ============================================================================
  # Data Collection Worker (Optional Scaling)
  # ============================================================================
  data-collector:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: soccer-intelligence-collector
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app/src
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - API_FOOTBALL_KEY=${API_FOOTBALL_KEY}
      - WORKER_TYPE=data_collection
    volumes:
      - ./data/focused:/app/data/focused
      - ./data/cache:/app/data/cache
      - ./logs:/app/logs
      - ./config/api_keys.yaml:/app/config/api_keys.yaml:ro
      - ./config/team_statistics_collection_config.yaml:/app/config/team_statistics_collection_config.yaml:ro
    networks:
      - soccer-intelligence-network
    depends_on:
      - postgres
      - redis
    command: ["python", "scripts/data_collection/comprehensive_team_statistics_collector.py", "--max-teams", "10"]
    profiles:
      - scaling

  # ============================================================================
  # Analysis Worker (Optional Scaling)
  # ============================================================================
  analysis-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: soccer-intelligence-analyzer
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app/src
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - WORKER_TYPE=analysis
    volumes:
      - ./data/focused:/app/data/focused
      - ./data/analysis:/app/data/analysis
      - ./data/reports:/app/data/reports
      - ./logs:/app/logs
    networks:
      - soccer-intelligence-network
    depends_on:
      - postgres
      - redis
    command: ["python", "scripts/analysis/simple_shapley_analysis.py"]
    profiles:
      - scaling

# ============================================================================
# Networks
# ============================================================================
networks:
  soccer-intelligence-network:
    driver: bridge
    name: soccer-intelligence-network

# ============================================================================
# Volumes for Persistent Data
# ============================================================================
volumes:
  postgres_data:
    driver: local
    name: soccer-intelligence-postgres-data
  redis_data:
    driver: local
    name: soccer-intelligence-redis-data


